// Mocks generated by Mockito 5.4.4 from annotations
// in secvault/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:secvault/features/vaults/data/datasources/vault_remote_datasource.dart'
    as _i3;
import 'package:secvault/features/vaults/data/models/vault_model.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeVaultModel_0 extends _i1.SmartFake implements _i2.VaultModel {
  _FakeVaultModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [VaultRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockVaultRemoteDataSource extends _i1.Mock
    implements _i3.VaultRemoteDataSource {
  MockVaultRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.VaultModel> createVault(String? name) => (super.noSuchMethod(
        Invocation.method(
          #createVault,
          [name],
        ),
        returnValue: _i4.Future<_i2.VaultModel>.value(_FakeVaultModel_0(
          this,
          Invocation.method(
            #createVault,
            [name],
          ),
        )),
      ) as _i4.Future<_i2.VaultModel>);

  @override
  _i4.Future<void> deleteVault(String? vaultId) => (super.noSuchMethod(
        Invocation.method(
          #deleteVault,
          [vaultId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.VaultModel>> getAllVaults() => (super.noSuchMethod(
        Invocation.method(
          #getAllVaults,
          [],
        ),
        returnValue: _i4.Future<List<_i2.VaultModel>>.value(<_i2.VaultModel>[]),
      ) as _i4.Future<List<_i2.VaultModel>>);

  @override
  _i4.Future<_i2.VaultModel?> getVaultById(String? vaultId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVaultById,
          [vaultId],
        ),
        returnValue: _i4.Future<_i2.VaultModel?>.value(),
      ) as _i4.Future<_i2.VaultModel?>);
}
